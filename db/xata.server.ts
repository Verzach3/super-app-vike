// Generated by Xata Codegen 0.29.4. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "surveys",
    columns: [
      {
        name: "name",
        type: "string",
        notNull: true,
        defaultValue: "default name",
      },
      { name: "json", type: "json", notNull: true, defaultValue: "{}" },
      {
        name: "description",
        type: "text",
        notNull: true,
        defaultValue: "default description",
      },
      { name: "global", type: "bool", notNull: true, defaultValue: "false" },
    ],
    revLinks: [
      { column: "survey", table: "asigned_surveys" },
      { column: "survey", table: "survey_answers" },
    ],
  },
  {
    name: "asigned_surveys",
    columns: [
      { name: "survey", type: "link", link: { table: "surveys" } },
      { name: "patient", type: "link", link: { table: "patient_profiles" } },
      { name: "answer", type: "link", link: { table: "survey_answers" } },
    ],
  },
  {
    name: "survey_answers",
    columns: [
      { name: "survey", type: "link", link: { table: "surveys" } },
      { name: "respondent", type: "link", link: { table: "patient_profiles" } },
      { name: "answer", type: "json", notNull: true, defaultValue: "{}" },
    ],
    revLinks: [{ column: "answer", table: "asigned_surveys" }],
  },
  {
    name: "patient_profiles",
    columns: [
      { name: "emr_id", type: "string", unique: true },
      { name: "user_id", type: "string", unique: true },
      { name: "name", type: "string", notNull: true, defaultValue: "" },
      { name: "second_name", type: "string" },
      { name: "lastname", type: "string", notNull: true, defaultValue: "" },
      {
        name: "birth_date",
        type: "datetime",
        notNull: true,
        defaultValue: "now",
      },
      { name: "gender", type: "string", notNull: true, defaultValue: "N" },
      { name: "phone", type: "string", notNull: true, defaultValue: "" },
      { name: "second_lastname", type: "string" },
      { name: "cedula", type: "string", unique: true },
    ],
    revLinks: [
      { column: "patient", table: "asigned_surveys" },
      { column: "respondent", table: "survey_answers" },
      { column: "patient_profile", table: "datasalud" },
    ],
  },
  {
    name: "roles",
    columns: [{ name: "type", type: "string", unique: true }],
    revLinks: [{ column: "asigned_role", table: "asigned_roles" }],
  },
  {
    name: "asigned_roles",
    columns: [
      { name: "user_uid", type: "string", unique: true },
      { name: "asigned_role", type: "link", link: { table: "roles" } },
    ],
  },
  {
    name: "products",
    columns: [
      { name: "product_name", type: "text" },
      { name: "description", type: "text" },
      { name: "price", type: "int" },
      { name: "stock", type: "int" },
    ],
  },
  {
    name: "discounts",
    columns: [
      { name: "code", type: "string" },
      { name: "percentage_off", type: "float" },
      { name: "valid_from", type: "datetime" },
      { name: "valid_to", type: "datetime" },
    ],
  },
  {
    name: "datasalud",
    columns: [
      {
        name: "patient_profile",
        type: "link",
        link: { table: "patient_profiles" },
        unique: true,
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Surveys = InferredTypes["surveys"];
export type SurveysRecord = Surveys & XataRecord;

export type AsignedSurveys = InferredTypes["asigned_surveys"];
export type AsignedSurveysRecord = AsignedSurveys & XataRecord;

export type SurveyAnswers = InferredTypes["survey_answers"];
export type SurveyAnswersRecord = SurveyAnswers & XataRecord;

export type PatientProfiles = InferredTypes["patient_profiles"];
export type PatientProfilesRecord = PatientProfiles & XataRecord;

export type Roles = InferredTypes["roles"];
export type RolesRecord = Roles & XataRecord;

export type AsignedRoles = InferredTypes["asigned_roles"];
export type AsignedRolesRecord = AsignedRoles & XataRecord;

export type Products = InferredTypes["products"];
export type ProductsRecord = Products & XataRecord;

export type Discounts = InferredTypes["discounts"];
export type DiscountsRecord = Discounts & XataRecord;

export type Datasalud = InferredTypes["datasalud"];
export type DatasaludRecord = Datasalud & XataRecord;

export type DatabaseSchema = {
  surveys: SurveysRecord;
  asigned_surveys: AsignedSurveysRecord;
  survey_answers: SurveyAnswersRecord;
  patient_profiles: PatientProfilesRecord;
  roles: RolesRecord;
  asigned_roles: AsignedRolesRecord;
  products: ProductsRecord;
  discounts: DiscountsRecord;
  datasalud: DatasaludRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Verzach3-s-workspace-l4k58l.us-east-1.xata.sh/db/wellfit-clinic-main",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
